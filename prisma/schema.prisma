// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String      @id @default(cuid())
  username  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  password  String?
  email     String?     @unique
  image     String?
  bio       String?
  accounts  Account[]
  sessions  Session[]
  bookmarks Bookmarks[] @relation("UserToBookmarks")
  recipes   Recipes[]   @relation("UserToRecipes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookmarks {
  id        String   @id @default(cuid())
  userID    String
  recipeID  String
  createdAt DateTime @default(now())
  recipe    Recipes  @relation("BookmarkToRecipes", fields: [recipeID], references: [id])
  user      User     @relation("UserToBookmarks", fields: [userID], references: [id])

  @@unique([userID, recipeID])
}

model Recipes {
  id              String      @id @default(cuid())
  userID          String
  recipe_name     String
  desc            String?
  instruction     String[]
  ingredients     String[]
  picture         String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  categoryID      String
  average_ratings Float?
  category        Category    @relation("CategoryToRecipes", fields: [categoryID], references: [id])
  bookmarks       Bookmarks[] @relation("BookmarkToRecipes")
  ratings         Ratings[]   @relation("RecipesToRatings")
  comments        Comments[]  @relation("RecipesToComments")
  user            User        @relation("UserToRecipes", fields: [userID], references: [id])
}

model Category {
  id          String    @id @default(cuid())
  strCategory String
  recipes     Recipes[] @relation("CategoryToRecipes")
}

model Ratings {
  id        String   @id @default(cuid())
  userID    String
  recipeID  String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipes   Recipes  @relation("RecipesToRatings", fields: [recipeID], references: [id])
}

model Comments {
  id              String   @id @default(cuid())
  userID          String
  recipeID        String
  comment_content String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  recipes         Recipes  @relation("RecipesToComments", fields: [recipeID], references: [id])
}
